{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","isLoading","setIsLoading","allWaves","setAllWaves","message","setMessage","counter","setCounter","contractABI","ABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","getAllWaves","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","connectWallet","alert","useEffect","getTotalWaves","count","toNumber","waveTxn","hash","wait","className","type","value","onChange","e","currentTarget","placeholder","onClick","map","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2589c24c.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport './App.css';\r\nimport ABI from \"./Utils/waveportal.json\"\r\n\r\n\r\n\r\n \r\nconst App = () => {\r\n\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [isLoading, setIsLoading]  = useState(false)\r\n  const [allWaves, setAllWaves] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [counter, setCounter] = useState(0)\r\n\r\n  \r\n\r\n  const contractAddress = \"0xBcCD4c1102EF001dBC479b65400d802b8a42092c\";\r\n\r\n  const contractABI = ABI.abi\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account);\r\n      } else {\r\n        console.log(\"No authorized account found\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  const getAllWaves = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        /*\r\n         * Call the getAllWaves method from your Smart Contract\r\n         */\r\n        const waves = await wavePortalContract.getAllWaves();\r\n        \r\n\r\n        /*\r\n         * We only need address, timestamp, and message in our UI so let's\r\n         * pick those out\r\n         */\r\n        let wavesCleaned = [];\r\n        waves.forEach(wave => {\r\n          wavesCleaned.push({\r\n            address: wave.waver,\r\n            timestamp: new Date(wave.timestamp * 1000),\r\n            message: wave.message\r\n          });\r\n        });\r\n\r\n        /*\r\n         * Store our data in React State\r\n         */\r\n        setAllWaves(wavesCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n\r\nconst connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]); \r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    getAllWaves()\r\n  }, [counter])\r\n\r\n\r\n\r\n  const wave = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        let count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n\r\n        /*\r\n        * Execute the actual wave from your smart contract\r\n        */\r\n        setIsLoading(true) \r\n        const waveTxn = await wavePortalContract.wave(message)\r\n        //const waveTxn = await wavePortalContract.wave();\r\n        console.log(\"Mining...\", waveTxn.hash);\r\n        \r\n\r\n        await waveTxn.wait();\r\n        console.log(\"Mined -- \", waveTxn.hash);\r\n\r\n        setIsLoading(false)\r\n\r\n        count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n\r\n        setCounter(count)\r\n        \r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n\r\n    finally {setIsLoading(false)}\r\n   \r\n  }\r\nreturn (\r\n    <div className=\"mainContainer\">\r\n      <div className=\"dataContainer\">\r\n        <div className=\"header\">\r\n          ðŸ‘‹ Hey there!\r\n        </div>\r\n\r\n        <div className=\"bio\">\r\n          I am farza and I worked on self-driving cars so that's pretty cool right? Connect your Ethereum wallet and wave at me!\r\n        </div>\r\n\r\n        <input className=\"bio\" type=\"text\" value = {message} onChange={(e)=>setMessage(e.currentTarget.value)} placeholder=\"Enter A Message\"/>\r\n        <button className=\"waveButton\" onClick={wave}>\r\n          Wave at Me\r\n        </button>\r\n\r\n        {isLoading && <p>Your wave is being sent. You will see it on screen once it's been sent...</p>}\r\n\r\n        {!currentAccount && (\r\n          <button className=\"waveButton\" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n\r\n        {allWaves.map((wave, index) => {\r\n          return (\r\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\r\n              <div>Address: {wave.address}</div>\r\n              <div>Time: {wave.timestamp.toString()}</div>\r\n              <div>Message: {wave.message}</div>\r\n            </div>)\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}